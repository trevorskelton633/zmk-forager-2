#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

/ {
    behaviors {
        hrl: HRL {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 30 31 32>;
            label = "HRL";
            hold-trigger-on-release;
        };

        hrr: HRR {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            label = "HRR";
            hold-trigger-on-release;
        };

        as_ht: as_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "AS_HT";
            bindings = <&shifted>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        NavLayer {
            bindings = <&mo 6>;
            key-positions = <31 32>;
            layers = <0>;
            timeout-ms = <80>;
        };

        DoubleShift {
            bindings = <&kp CAPSLOCK>;
            key-positions = <13 16>;
            layers = <6>;
        };

        Leftside_ctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <13 11>;
            layers = <0>;
        };

        Rightside_control {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <16 18>;
            layers = <0>;
        };

        Leftside_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <13 12>;
            layers = <0>;
        };

        Rightside_shift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <16 17>;
            layers = <0>;
        };
    };

    macros {
        shifted: shifted {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFTED";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T  &as Y  &kp U  &kp I  &kp O          &kp P
&kp A         &kp S         &kp D         &kp F         &kp G                                             &kp H        &kp J    &kp K        &kp L      &kp SEMICOLON
&kp Z         &kp X         &kp C         &kp V         &kp B                                             &kp N        &kp M    &kp COMMA    &kp DOT    &kp FSLH
                                                        &lt 1 TAB         &lt 2 ENTER    &kp BACKSPACE    &lt 3 SPACE
            >;
        };

        Nums {
            bindings = <
&trans  &trans  &trans  &kp DEL  &trans   &kp ASTERISK  &kp N7          &kp N8  &kp NUMBER_9  &kp DELETE
&mo 5           &mo 3            &kp ESC                &kp LEFT_SHIFT          &trans                                       &kp PERIOD    &kp NUMBER_4    &kp N5          &kp NUMBER_6    &kp BSLH
&trans          &trans           &trans                 &kp BACKSPACE           &trans                                       &kp N0        &kp NUMBER_1    &kp NUMBER_2    &kp NUMBER_3    &kp EQUAL
                                                                                &mo 2                     &none    &trans    &trans
            >;
        };

        sym {
            bindings = <
&kp LC(LA(END))  &none  &none   &kp DELETE  &none      &none  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE
&none                   &mo 4               &kp GRAVE         &kp SQT                              &none                                                &kp UNDERSCORE    &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS    &kp EQUAL    &kp PLUS
&trans                  &trans              &trans            &kp BACKSPACE                        &trans                                               &trans            &kp MINUS               &kp BACKSLASH            &kp PIPE     &kp GRAVE
                                                                                                   &trans                           &trans    &trans    &trans
            >;
        };

        Functs {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10
&trans          &trans          &trans          &trans          &trans                               &trans    &kp F4    &kp F5    &kp F6    &kp F11
&trans          &trans          &trans          &trans          &trans                               &trans    &kp F1    &kp F2    &kp F3    &kp F12
                                                                &trans           &trans    &trans    &trans
            >;
        };

        Nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp HOME  &kp UP  &kp END  &kp C_VOLUME_UP
&trans          &trans          &trans          &trans            &trans                                        &trans    &kp LEFT    &kp DOWN    &kp RIGHT    &kp K_VOLUME_DOWN
&trans          &trans          &trans          &trans            &trans                                        &trans    &trans      &trans      &trans       &kp C_MUTE
                                                                  &trans                    &trans    &trans    &trans
            >;
        };

        Devices {
            bindings = <
&bt BT_CLR  &trans  &trans  &trans  &trans  &out OUT_TOG  &out OUT_USB  &trans  &trans  &trans
&trans              &trans          &trans                &trans                &trans                              &trans    &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3
&trans              &trans          &trans                &trans                &trans                              &trans    &trans          &trans          &trans          &trans
                                                                                &trans          &trans    &trans    &trans
            >;
        };

        Mods {
            bindings = <
&trans            &trans  &trans        &kp LC(DELETE)  &trans        &trans  &trans             &trans  &trans  &trans
&kp LEFT_CONTROL          &kp LEFT_ALT                  &kp LEFT_GUI          &kp LEFT_SHIFT             &trans                              &trans    &kp RIGHT_SHIFT    &kp LEFT_GUI    &kp LEFT_ALT    &kp LEFT_CONTROL
&trans                    &trans                        &trans                &kp LC(BACKSPACE)          &trans                              &trans    &trans             &trans          &trans          &trans
                                                                                                         &trans          &trans    &trans    &trans
            >;
        };
    };
};
