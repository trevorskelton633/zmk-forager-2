#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

/ {
    behaviors {
        hrl: HRL {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 30 31 32>;
            label = "HRL";
            hold-trigger-on-release;
        };

        hrr: HRR {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            label = "HRR";
            hold-trigger-on-release;
        };

        as_ht: as_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "AS_HT";
            bindings = <&shifted>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        Caps_Lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <16 13>;
        };

        Esc {
            bindings = <&kp ESC>;
            key-positions = <0 9>;
        };
    };

    macros {
        shifted: shifted {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFTED";
        };

        as: as {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwerty {
            bindings = <
&kp Q        &kp W  &kp E           &kp R  &kp T            &kp Y  &kp U             &kp I  &kp O      &kp P
&mt LCTRL A         &mt LEFT_ALT S         &mt LEFT_META D         &mt LEFT_SHIFT F         &kp G                                             &kp H          &mt RIGHT_SHIFT J    &mt RIGHT_META K    &mt RIGHT_ALT L    &mt RCTRL SQT
&kp Z               &kp X                  &lt 7 C                 &lt 5 V                  &kp B                                             &kp N          &lt 4 M              &lt 6 COMMA         &kp DOT            &kp FSLH
                                                                                            &lt 1 TAB         &lt 5 ENTER    &kp BACKSPACE    &lt 2 SPACE
            >;
        };

        Sym {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp POUND  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp GRAVE                     &lt 5 &none                 &kp COLON                 &kp BACKSLASH                &trans                                                           &kp PLUS     &kp MINUS        &kp UNDERSCORE      &kp LEFT_BRACKET    &kp RIGHT_BRACKET
&kp TILDE                     &trans                 &kp SEMICOLON             &kp PIPE                     &trans                                                           &kp EQUAL    &kp LESS_THAN    &kp GREATER_THAN    &kp LEFT_BRACE      &kp RIGHT_BRACE
                                                                                                            &trans                                       &trans    &trans    &trans
            >;
        };

        Nav {
            bindings = <
&trans                  &trans  &trans                  &trans  &trans       &kp HOME  &kp PAGE_DOWN            &kp PAGE_UP  &kp END                  &kp BACKSPACE
&trans                          &trans                          &kp DELETE             &trans                                &trans                                                      &kp LEFT_ARROW    &kp DOWN_ARROW    &kp UP_ARROW    &kp RIGHT_ARROW    &kp ENTER
&kp LS(LG(LEFT_ARROW))          &kp LC(LG(LEFT_ARROW))          &kp LG(TAB)            &kp LC(LG(RIGHT_ARROW))               &kp LS(LG(RIGHT_ARROW))                                     &kp LC(HOME)      &trans            &trans          &kp LC(END)        &trans
                                                                                                                             &trans                                  &trans    &trans    &trans
            >;
        };

        Fn {
            bindings = <
&kp LG(L)     &kp LS(LG(S))  &trans        &sys_reset  &bt BT_CLR    &to 5  &kp F7        &kp F8  &kp F9        &kp F10
&trans                       &trans                    &trans               &trans                &trans                                     &trans    &kp F4    &kp F5    &kp F6    &kp F11
&bt BT_SEL 0                 &bt BT_SEL 1              &bt BT_SEL 2         &bt BT_SEL 3          &bt BT_SEL 4                               &trans    &kp F1    &kp F2    &kp F3    &kp F12
                                                                                                  &trans                 &trans    &trans    &trans
            >;
        };

        Coding {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans
&trans          &trans          &trans          &caps_word          &trans                              &trans    &trans    &trans    &trans    &trans
&trans          &trans          &trans          &trans              &trans                              &trans    &trans    &trans    &trans    &trans
                                                                    &trans          &trans    &trans    &trans
            >;
        };

        Nums {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &to 0  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans
&trans          &trans          &trans         &trans                            &trans                                       &kp PERIOD         &kp KP_NUMBER_4    &kp KP_NUMBER_5    &kp KP_NUMBER_6    &kp ENTER
&trans          &trans          &trans         &trans                            &trans                                       &kp SLASH          &kp KP_NUMBER_1    &kp KP_NUMBER_2    &kp KP_NUMBER_3    &trans
                                                                                 &trans                   &trans    &trans    &kp KP_NUMBER_0
            >;
        };

        L_Run {
            bindings = <
&kp N1  &kp Q  &kp A  &kp Z  &trans  &trans  &trans  &trans  &trans  &trans
&kp N2         &kp W         &kp S           &kp X           &trans                              &trans    &trans    &trans    &trans    &trans
&kp N3         &kp E         &kp D           &kp C           &trans                              &trans    &trans    &trans    &trans    &trans
                                                             &trans          &trans    &trans    &trans
            >;
        };

        R_Run {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp N4  &kp R  &kp F   &kp V
&trans          &trans          &trans          &trans         &trans                             &trans    &kp N5    &kp T    &kp G    &kp B
&trans          &trans          &trans          &trans         &trans                             &trans    &kp N6    &kp Y    &kp H    &kp N
                                                               &trans         &trans    &trans    &trans
            >;
        };
    };
};
